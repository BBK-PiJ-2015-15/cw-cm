import java.util.Arrays;
import java.util.Calendar;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 * FutureMeetingImpl unit test.
 *
 * Test cases:
 *   - construction.
 */
public class FutureMeetingImplTest {
  /**
   * The random number generator.
   */
  private static Random random;
  
  /**
   * Generates the random seed number.
   */
  @BeforeClass
  public static void generateSeed() {
    random = new Random();
  }
  
  /**
   * The future meeting id.
   *
   * The id is randomly generated from a valid range.
   */
  private int id;
  
  /**
   * The future meeting date.
   */
  private Calendar date;
  
  /**
   * The set of future meeting contacts.
   *
   * The contacts are mocked to help testing this implementation. They are
   * tested in a separate unit test.
   */
  private final Set<Contact> contacts = new HashSet<Contact>(
    Arrays.asList(new MockContact(), new MockContact()));
  
  /**
   * Creates a new future meeting test.
   *
   * A random id in the range 1 to Integer.MAX_VALUE and a date 7 days in the
   * future will be generated by this constructor.
   */
  public FutureMeetingImplTest() {
    // generate id
    id = random.nextInt(Integer.MAX_VALUE - 1) + 1;
    
    // set date to 7 days in the future
    date = Calendar.getInstance();
    date.add(Calendar.DATE, 7);
  }
  
  @Test(expected=IllegalArgumentException.class)
  public void testNewMeetingWithNegativeIdShouldThrow() {
    FutureMeeting futureMeeting = new FutureMeetingImpl(-1, date, contacts);
  }
  
  @Test(expected=IllegalArgumentException.class)
  public void testNewMeetingWithZeroIdShouldThrow() {
    FutureMeeting futureMeeting = new FutureMeetingImpl(0, date, contacts);
  }
  
  @Test(expected=NullPointerException.class)
  public void testNewMeetingWithNullCalendarShouldThrow() {
    FutureMeeting futureMeeting = new FutureMeetingImpl(id, null, contacts);
  }
  
  @Test(expected=NullPointerException.class)
  public void testNewMeetingWithNullContactsShouldThrow() {
    FutureMeeting futureMeeting = new FutureMeetingImpl(id, date, null);
  }
  
  @Test(expected=IllegalArgumentException.class)
  public void testNewMeetingWithEmptyContactsShouldThrow() {
    FutureMeeting futureMeeting = new FutureMeetingImpl(id, date,
      new HashSet<Contact>());
  }
  
  @Test
  public void testNewFutureMeeting() {
    FutureMeeting futureMeeting = new FutureMeetingImpl(id, date, contacts);
  }
}
