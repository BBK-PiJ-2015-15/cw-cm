import java.util.Arrays;
import java.util.Calendar;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;
import static org.junit.Assert.assertEquals;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.mockito.Mockito.*;

/**
 * PastMeetingImpl unit testing.
 *
 * Test cases:
 *   - NullPointerException is thrown when passing null as the notes parameter;
 *   - getNotes() returns notes parameter passed in the constructor.
 */
public class PastMeetingImplTest {
  /**
   * The random number generator.
   */
  private static Random random;
  
  /**
   * Generates the random seed number.
   */
  @BeforeClass
  public static void generateSeed() {
    random = new Random();
  }
  
  /**
   * The past meeting id.
   *
   * The id is randomly generated from a valid range.
   */
  private int id;
  
  /**
   * The past meeting date.
   */
  private final Calendar calendar = Calendar.getInstance();
  
  /**
   * The set of past meeting contacts.
   *
   * The contacts are mocked to help testing this implementation. They are
   * tested in a separate unit test.
   */
  private final Set<Contact> contacts = new HashSet<Contact>(
    Arrays.asList(mock(Contact.class), mock(Contact.class)));
  
  /**
   * The past meeting notes.
   */
  private final String notes = "A few notes about the past meeting.";
  
  /**
   * Creates a new past meeting test.
   *
   * A random id in the range 1 to Integer.MAX_VALUE will be generated by this
   * constructor.
   */
  public PastMeetingImplTest() {
    id = random.nextInt(Integer.MAX_VALUE - 1) + 1;
  }
  
  @Test(expected=NullPointerException.class)
  public void testNewPastMeetingWithNullNotesShouldThrow() {
    PastMeeting pastMeeting = new PastMeetingImpl(id, calendar, contacts, null);
  }
  
  @Test
  public void testNewPastMeeting() {
    PastMeeting pastMeeting = new PastMeetingImpl(id, calendar, contacts,
      notes);
    assertEquals(pastMeeting.getNotes(), notes);
  }
}
