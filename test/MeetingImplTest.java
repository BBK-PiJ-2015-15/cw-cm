import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;

/**
 * Implementation of the MeetingImplTest test class.
 */
public class MeetingImplTest {
    private class MeetingMock extends MeetingImpl {
        public MeetingMock(int id, Calendar date, Set<Contact> contacts) {
            super(id, date, contacts);
        }
    }
    
    private static Random random;
    
    private int id;
    private final Calendar calendar = Calendar.getInstance();
    private final Set<Contact> contacts = new HashSet<Contact>();
    
    /**
     * Generates the random seed number.
     */
    @BeforeClass
    public static void generateSeed() {
        random = new Random();
    }
    
    /**
     * Creates a new meeting test.
     *
     * A random id in the range 1 to Integer.MAX_VALUE will be generated by this
     * constructor.
     */
    public MeetingImplTest() {
        id = random.nextInt(Integer.MAX_VALUE - 1) + 1;
    }
    
    @Before
    public void setUp() {
        contacts.add(new ContactImpl(1, "John Doe"));
        contacts.add(new ContactImpl(2, "Jane Doe"));
    }
    
    @Test(expected=IllegalArgumentException.class)
    public void testNewMeetingWithNegativeIdShouldThrow() {
        Meeting meeting = new MeetingMock(-1, calendar, contacts);
    }
    
    @Test(expected=IllegalArgumentException.class)
    public void testNewMeetingWithZeroIdShouldThrow() {
        Meeting meeting = new MeetingMock(0, calendar, contacts);
    }
    
    @Test(expected=NullPointerException.class)
    public void testNewMeetingWithNullCalendarShouldThrow() {
        Meeting meeting = new MeetingMock(id, null, contacts);
    }
    
    @Test(expected=NullPointerException.class)
    public void testNewMeetingWithNullContactsShouldThrow() {
        Meeting meeting = new MeetingMock(id, calendar, null);
    }
    
    @Test(expected=IllegalArgumentException.class)
    public void testNewMeetingWithEmptyContactsShouldThrow() {
        Meeting meeting = new MeetingMock(id, calendar, new HashSet<Contact>());
    }
    
    @Test
    public void testNewMeetingWithIdNameAndContacts() {
        Meeting meeting = new MeetingMock(id, calendar, contacts);
        assertEquals(meeting.getId(), id);
        assertEquals(meeting.getDate(), calendar);
        assertEquals(meeting.getContacts(), contacts);
    }
}
