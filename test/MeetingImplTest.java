import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
import static org.mockito.Mockito.*;

/**
 * MeetingImplTest unit test.
 *
 * Test cases:
 * -
 */
public class MeetingImplTest {
    /**
     * The random number generator.
     */
    private static Random random;
    
    /**
     * Creates the random seed number.
     */
    @BeforeClass
    public static void generateSeed() {
        random = new Random();
    }
    
    /**
     * A mock class extending the abstract meeting class.
     */
    private final class MeetingMock extends MeetingImpl {
        public MeetingMock(int id, Calendar date, Set<Contact> contacts) {
            super(id, date, contacts);
        }
    }
    
    /**
     * The meeting id.
     *
     * The id is randomly generated from a valid range.
     */
    private int id;
    
    /**
     * A date.
     */
    private final Calendar date = Calendar.getInstance();
    
    /**
     * The set of past meeting contacts.
     *
     * The contacts are mocked to help testing this implementation. They are
     * tested in a separate unit test.
     */
    private final Set<Contact> contacts = new HashSet<Contact>(
        Arrays.asList(mock(Contact.class), mock(Contact.class)));
    
    /**
     * Creates a new meeting test.
     *
     * A random id in the range 1 to Integer.MAX_VALUE will be generated by this
     * constructor.
     */
    public MeetingImplTest() {
        id = random.nextInt(Integer.MAX_VALUE - 1) + 1;
    }
    
    @Test(expected=IllegalArgumentException.class)
    public void testNewMeetingWithNegativeIdShouldThrow() {
        Meeting meeting = new MeetingMock(-1, date, contacts);
    }
    
    @Test(expected=IllegalArgumentException.class)
    public void testNewMeetingWithZeroIdShouldThrow() {
        Meeting meeting = new MeetingMock(0, date, contacts);
    }
    
    @Test(expected=NullPointerException.class)
    public void testNewMeetingWithNullCalendarShouldThrow() {
        Meeting meeting = new MeetingMock(id, null, contacts);
    }
    
    @Test(expected=NullPointerException.class)
    public void testNewMeetingWithNullContactsShouldThrow() {
        Meeting meeting = new MeetingMock(id, date, null);
    }
    
    @Test(expected=IllegalArgumentException.class)
    public void testNewMeetingWithEmptyContactsShouldThrow() {
        Meeting meeting = new MeetingMock(id, date, new HashSet<Contact>());
    }
    
    @Test
    public void testNewMeetingWithIdNameAndContacts() {
        Meeting meeting = new MeetingMock(id, date, contacts);
        assertEquals(meeting.getId(), id);
        assertEquals(meeting.getDate(), date);
        assertEquals(meeting.getContacts(), contacts);
        
        // assert equality
        assertEquals(meeting, meeting);
        assertEquals(meeting, new MeetingMock(id, date, contacts));
    }
}
